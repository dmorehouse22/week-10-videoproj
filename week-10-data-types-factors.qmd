---
title: "Data Types - Factors"
format: html
embed-resources: true
---

```{r}
#| label: setup
library(tidyverse)
library(babynames) #may need to install
library(nycflights13)
```

# Logicals

## Your Turn 1

Use `flights` to create `delayed`, a variable that displays whether a flight was delayed (`arr_delay > 0`).

Then, remove all rows that contain an NA in `delayed`. 

Finally, create a summary table that shows:

1. How many flights were delayed  
2. What proportion of flights were delayed

```{r}
flights |>
  mutate(delayed = arr_delay > 0) |>
  drop_na(delayed) |>
  summarize(total = sum(delayed), 
              prop = mean(delayed))
```



# Factors

## Your Turn 2

Repeat the demonstration, some of whose code is below, to make a sensible graph of average TV consumption by marital status.

*(Hint: Be sure to remove each `_` before running the code)*

```{r}
gss_cat |>
  drop_na(tvhours) |>
  group_by(marital) |>
  summarise(tv_avg = mean(tvhours)) |>
  ggplot() +
    geom_point(mapping = aes(x = tv_avg, 
                             y = fct_reorder(marital, tv_avg)))
```

## Your Turn 3

Do you think liberals or conservatives watch more TV?
Compute average tv hours by party ID an then plot the results.

```{r}
gss_cat |>
  drop_na(tvhours) |>
  mutate(partyid = partyid |>
           fct_collapse(conservative = c("Strong republican", 
                                                 "Not str republican",
                                                 "Ind,near rep"), 
                                liberal = c("Strong democrat",
                                            "Not str democrat",
                                            "Ind,near dem"))) |>
  group_by(partyid) |>
  summarise(tv_avg = mean(tvhours)) |>
  ggplot() +
    geom_point(mapping = aes(x = tv_avg, 
                             y = fct_reorder(partyid, tv_avg)))
```



## Additional Modification

```{r}
gss_cat |>
  drop_na(tvhours) |>
  mutate(partyid = fct_recode(partyid,
                              "Republican, strong" = "Strong republican",
                              "Republican, weak" = "Not str republican",
                              "Independent, near rep" = "Ind,near rep",
                              "Independent, near dem" = "Ind,near dem",
                              "Democrat, weak" = "Not str democrat",
                              "Democrat, strong" = "Strong democrat")) |> 
  group_by(partyid) |>
  summarize(tv_avg = mean(tvhours)) |>
  ggplot(aes(x = tv_avg, 
             y = fct_reorder(partyid, tv_avg))) +
  geom_point() + 
  labs(x = "Average Number of Hours of TV Reported Watched", y = "Political Party ID")
```

```{r}
#levels(gss_cat$partyid)
gss_cat |>
  drop_na(tvhours) |>
  mutate(partyid = fct_collapse(partyid,
                                Conservative = c("Strong republican", 
                                                 "Not str republican", 
                                                 "Ind,near rep"),
                                Liberal = c("Strong democrat", 
                                            "Not str democrat", 
                                            "Ind,near dem",
                                            other_level = "Other"))) |> 
  group_by(partyid) |>
  summarize(tv_avg = mean(tvhours)) |>
  ggplot(aes(x = tv_avg, 
             y = fct_reorder(partyid, tv_avg))) +
  geom_point() + 
  labs(y = "partyid")
```


***

# Take Aways

Dplyr gives you three _general_ functions for manipulating data: `mutate()`, `summarise()`, and `group_by()`. Augment these with functions from the packages below, which focus on specific types of data.

Package   | Data Type
--------- | --------
stringr   | strings
forcats   | factors
hms       | times
lubridate | dates and times

